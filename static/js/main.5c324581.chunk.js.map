{"version":3,"sources":["footerComponent.js","App.js","serviceWorker.js","index.js"],"names":["footerComponent","id","href","target","rel","Component","App","state","isLoaded","pokemonData","axios","get","then","res","setState","data","catch","error","console","log","this","Jumbotron","fluid","Container","name","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0SAKqBA,G,yLAEb,OACI,4BAAQC,GAAK,aACT,6DACiC,uBAAGC,KAAM,sBAAsBC,OAAO,SAASC,IAAK,uBAApD,oB,GALJC,cCIxBC,E,4MACnBC,MAAQ,CACNC,UAAU,EACVC,YAAa,I,kEAGM,IAAD,OAClBC,IAAMC,IAAI,2CACPC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZL,YAAaI,EAAIE,KACnBP,UAAU,OAGXQ,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,+BAKhB,OAAIG,KAAKb,MAAMC,SAQX,6BACE,yBAAKP,GAAK,YACR,kBAACoB,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,6CAIJ,yBAAKtB,GAAK,eACR,gCAAMmB,KAAKb,MAAME,YAAYe,KAA7B,KACA,4CAAkBJ,KAAKb,MAAME,YAAYR,IACzC,yBAAKwB,IAAM,uFAOf,kBAAC,EAAD,OAxBF,yBAAKxB,GAAK,YAAV,e,GAtByBI,aCGbqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMwB,c","file":"static/js/main.5c324581.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nimport './style/footerStyle.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class footerComponent extends Component {\r\n    render() {\r\n        return (\r\n            <footer id = \"footerDiv\">\r\n                <div>\r\n                    Credits to the free API from <a href =\"https://pokeapi.co/\" target=\"_blank\" rel= \"noopener noreferrer\">Pokeapi.co</a>\r\n                </div>\r\n            </footer>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react'\nimport axios from 'axios'\nimport {Jumbotron, Container} from 'react-bootstrap'\n\nimport './style/mainAppStyle.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport Footer from './footerComponent'\n\nexport default class App extends Component {\n  state = {\n    isLoaded: false,\n    pokemonData: []\n  }\n\n  componentDidMount() {\n    axios.get('https://pokeapi.co/api/v2/pokemon/ditto')\n      .then(res => {\n        this.setState({\n          pokemonData: res.data,\n        isLoaded: true\n        })\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n  render() {\n    if(!this.state.isLoaded) {\n      return(\n        <div id = \"mainBody\">Loading</div>\n      );\n      \n    }\n    else {\n      return(\n        <div>\n          <div id = \"mainBody\">\n            <Jumbotron fluid>\n              <Container>\n                <h1>Pokemon API</h1>\n              </Container>\n            </Jumbotron>\n\n            <div id = \"pokemonData\">\n              <h1> {this.state.pokemonData.name} </h1>\n              <h2>Pokemon ID: #{this.state.pokemonData.id}</h2>\n              <img src = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/132.png\"/>\n            </div>\n\n\n              \n          </div>\n\n          <Footer/>\n        </div>\n      );\n    }\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}